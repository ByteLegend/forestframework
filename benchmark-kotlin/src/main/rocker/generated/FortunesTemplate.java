package generated;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import io.forestframework.benchmark.model.Fortune;
// import @ [2:1]
import java.util.List;

/*
 * Auto generated code to render template generated/FortunesTemplate.rocker.html
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class FortunesTemplate extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.HTML; }
    static public String getTemplateName() { return "FortunesTemplate.rocker.html"; }
    static public String getTemplatePackageName() { return "generated"; }
    static public String getHeaderHash() { return "625141204"; }
    static public String[] getArgumentNames() { return new String[] { "fortunes" }; }

    // argument @ [3:2]
    private List<Fortune> fortunes;

    public FortunesTemplate fortunes(List<Fortune> fortunes) {
        this.fortunes = fortunes;
        return this;
    }

    public List<Fortune> fortunes() {
        return this.fortunes;
    }

    static public FortunesTemplate template(List<Fortune> fortunes) {
        return new FortunesTemplate()
            .fortunes(fortunes);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for performance (via rocker.optimize flag; no auto reloading)
        return new Template(this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // <!DOCTYPE html>\n<html>\n<head><title>Fortunes</title></head>\n<body>\n<table>\n  <tr>\n    <th>id</th>\n    <th>message</th>\n  </tr> 
        static private final byte[] PLAIN_TEXT_0_0;
        // \n  <tr>\n    <td>
        static private final byte[] PLAIN_TEXT_1_0;
        // </td>\n    <td>
        static private final byte[] PLAIN_TEXT_2_0;
        // </td>\n  </tr> 
        static private final byte[] PLAIN_TEXT_3_0;
        //  </table>\n</body>\n</html>\n
        static private final byte[] PLAIN_TEXT_4_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(FortunesTemplate.class.getClassLoader(), FortunesTemplate.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
            PLAIN_TEXT_4_0 = loader.tryGet("PLAIN_TEXT_4_0");
        }

        // argument @ [3:2]
        protected final List<Fortune> fortunes;

        public Template(FortunesTemplate model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.fortunes = model.fortunes();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [3:30]
            __internal.aboutToExecutePosInTemplate(3, 30);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ForBlockBegin @ [12:9]
            __internal.aboutToExecutePosInTemplate(12, 9);
            try {
                final com.fizzed.rocker.runtime.IterableForIterator<Fortune> __forIterator0 = new com.fizzed.rocker.runtime.IterableForIterator<Fortune>(fortunes);
                while (__forIterator0.hasNext()) {
                    final com.fizzed.rocker.ForIterator i = __forIterator0;
                    final Fortune fortune = __forIterator0.next();
                    try {
                        // PlainText @ [12:61]
                        __internal.aboutToExecutePosInTemplate(12, 61);
                        __internal.writeValue(PLAIN_TEXT_1_0);
                        // ValueExpression @ [14:9]
                        __internal.aboutToExecutePosInTemplate(14, 9);
                        __internal.renderValue(fortune.getId(), false);
                        // PlainText @ [14:25]
                        __internal.aboutToExecutePosInTemplate(14, 25);
                        __internal.writeValue(PLAIN_TEXT_2_0);
                        // ValueExpression @ [15:9]
                        __internal.aboutToExecutePosInTemplate(15, 9);
                        __internal.renderValue(fortune.getMessage(), false);
                        // PlainText @ [15:30]
                        __internal.aboutToExecutePosInTemplate(15, 30);
                        __internal.writeValue(PLAIN_TEXT_3_0);
                        // ForBlockEnd @ [12:9]
                        __internal.aboutToExecutePosInTemplate(12, 9);
                    } catch (com.fizzed.rocker.runtime.ContinueException e) {
                        // support for continuing for loops
                    }
                } // for end @ [12:9]
            } catch (com.fizzed.rocker.runtime.BreakException e) {
                // support for breaking for loops
            }
            // PlainText @ [16:10]
            __internal.aboutToExecutePosInTemplate(16, 10);
            __internal.writeValue(PLAIN_TEXT_4_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "<!DOCTYPE html>\n<html>\n<head><title>Fortunes</title></head>\n<body>\n<table>\n  <tr>\n    <th>id</th>\n    <th>message</th>\n  </tr> ";
        static private final String PLAIN_TEXT_1_0 = "\n  <tr>\n    <td>";
        static private final String PLAIN_TEXT_2_0 = "</td>\n    <td>";
        static private final String PLAIN_TEXT_3_0 = "</td>\n  </tr> ";
        static private final String PLAIN_TEXT_4_0 = " </table>\n</body>\n</html>\n";

    }

}
